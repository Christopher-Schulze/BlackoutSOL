name: BlackoutSOL Security Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # Option zur manuellen Ausführung hinzufügen
  workflow_dispatch:

jobs:
  security-tests:
    name: Führe Sicherheitstests durch
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v3

      - name: Rust installieren
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
          override: true

      - name: Rust Cache aktivieren
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./programs/blackout -> target"
          
      - name: Bauabhängigkeiten für Solana installieren
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev
          
      # Codeformatierung überprüfen
      - name: Code-Formatierung überprüfen
        run: cargo fmt --all -- --check
        working-directory: ./programs/blackout
        
      # Lint-Überprüfungen
      - name: Clippy Lint ausführen
        run: cargo clippy -- -D warnings
        working-directory: ./programs/blackout
        
      # Bauen in Release-Modus
      - name: Release-Modus bauen
        run: cargo build --release
        working-directory: ./programs/blackout
      
      # Standard-Tests ausführen
      - name: Standardtests ausführen
        run: cargo test --package blackout --test bloom_filter_test_vectors --test pda_validation_test_vectors --test poseidon_test_vectors
        working-directory: ./programs/blackout
        
      # Edge-Case-Tests ausführen
      - name: Edge-Case-Tests ausführen
        run: cargo test --package blackout --test bloom_filter_edge_cases
        working-directory: ./programs/blackout
        
      # Penetrationstests ausführen
      - name: Penetrationstests ausführen
        run: cargo test --package blackout --test bloom_filter_penetration_tests
        working-directory: ./programs/blackout
        
      # Fuzzing-Tests ausführen
      - name: Fuzzing-Tests ausführen
        run: cargo test --package blackout --test bloom_filter_fuzz_tests
        working-directory: ./programs/blackout
        
      # Leistungsüberprüfung (keine Fehlermeldung, nur Benachrichtigung)
      - name: Leistungsvalidierung durchführen
        run: |
          echo "Führe Leistungstests durch..."
          cargo test --package blackout --test bloom_filter_edge_cases test_bloom_filter_performance -- --nocapture || true
        working-directory: ./programs/blackout
          
      # Audit-Zusammenfassung generieren
      - name: Sicherheitsaudit-Zusammenfassung erstellen
        if: always()
        run: |
          echo "# Sicherheitstest-Ergebnisse" > security_audit_results.md
          echo "## Durchgeführt am: $(date)" >> security_audit_results.md
          echo "## Status:" >> security_audit_results.md
          
          # Ergebnis basierend auf vorherigen Schritten
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ **Bestanden**: Alle Sicherheitstests erfolgreich!" >> security_audit_results.md
          else
            echo "❌ **Fehlgeschlagen**: Bitte überprüfen Sie die fehlgeschlagenen Tests!" >> security_audit_results.md
          fi
          
          echo "## Getestete Komponenten:" >> security_audit_results.md
          echo "- Bloom-Filter-Implementierung" >> security_audit_results.md
          echo "- PDA-Validierungslogik" >> security_audit_results.md
          echo "- Poseidon-Hashing" >> security_audit_results.md
          echo "- Edge-Case-Verhalten" >> security_audit_results.md
          echo "- Penetrationsresistenz" >> security_audit_results.md
          
      # Speichere Audit-Zusammenfassung als Artefakt
      - name: Audit-Ergebnisse hochladen
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-results
          path: security_audit_results.md
          retention-days: 30
